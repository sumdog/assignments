A disadvantage of object orientated design is that you could increase the complexity of a problem that doesn't lend itself well to object orientated design. An example of that is web development. ASP is a web development language that feels like a graphical toolkit. It wraps HTML rendering within several classes that are very similar to graphical toolkits used in application design. Although this adds a nice layer of abstraction for programs who arn't use to dealing with HTML, it's also a thick layer of abstraction that could cause performance delays and increases the complexity of simply web design.

Another example is PHP. It's a non-object orientated scripting language (It supports objects, but they're rarely used and don't support private methods or fields) that basically adds a powerful scripting layer to regular HTML. If designed well, it's possible to have a very modular website designed in PHP without the overhead involved with objects.


Use Case Diagrams

Use cases are typically used as a top-down approach (looking at the end result and building a solutiuon). The best way to think of use case diagrams is a way to describe seceneros you'd want the end user to be able to perform. Use cases diagrams are typically composed of actors which are represented by stick men and cases which are represented by little bubbles. 

Use cases are good for presenting a concept for a design in a very easy to understand fassion. Non-computer people can usually understand the diagrams after some basic explanation which makes them ideal for showing clients and non-engeneering people who are involved in a project.

Class Diagrams

A Class Diagram is typically used to break down the problem into a serise of classes. The diagrams represent each class with a box. The box contains three sections, one for the class name, another for the class constructor and methods and a third for variable defined within that class. Arrows are used to relate one class to another. A 1 or m is typically placed next to an arrow to indicate the type of relationship. You can have 1 to 1 (only one instance of each class exists and they talk directly to each other), 1 to many (one instance of a class talks to many instances of another class), many to 1 and many to many (many instances of a class will talk to many instances of the other class which is very bad!).

Class Diagrams are useful tools for trying to break down the problem/project into workable classes/modules and to see how the classes/modules will talk to each other.


Sequence Diagrams

Sequence Diagrams are used to indicate how and when individual classes will communicate with each other. They're composed of squares lining the top of the page representing classes. Dotted lines are then drawn down from them. When the object is instantiated, the dotted line turns into a solid line. It turns back into a dotted line when that object is deleted (some classes will have a solid line throughout the program). Arrows are drawn beteen the solid segments to indicate events.

These diagrams are useful to see how classes communicate between each other and to keep track of events. 

7)
One example of a non-exucution testing technique is called a "Code Walkthough," during which a team of programms will look at your code (e.g. on an overhead) and step through each class, subroutiene and method during which time they may ask questions, call out mistakes and scrutunize your code. Although it can be very helpful way to examine code, it's not always the best for the pride of the programmer who's doing the walk-through.

8)
Coupling is used to describe how a given module interacts with other modules. Cohesion is how powerful, self-sufficent and independent a given module is. Typically it's better to have low coupling and high Cohesion. You want your modules to be faily independent. This allows for easier testing (If your module makes calls to 15 other modules for it's data, it's hard to find who's at fault) as well as making it easier to reuse. You also want them to be fairly powerful in-and-of-themselves or Cohesive so that you don't have a bunch of smaller modules coupled together that should really be done by one cohesive object. 


9)
One way to promote code reuse is offering cash bonuses and rewards to programmers who reuse a significant segment of code. Another way to promote reuse is to encourge programmers to develop current projects in such a way as to make the code easy for reuse.

An example of a disadvantage to code reuse is the the fact that often times, a programmer will generate code for a specific problem. Although there may be errors that would occur in general, the programmer may determine none of those errors will occure in the way the person who's using his module designs their implementation. If you take this code later and try to adapt it to something else, you may run into unchecked excpetions. An example of this in class was the European Space program and their $500 million dollar failed rocket that died becasue it couldn't convert a 64-bit integer to a 16-bit short. 



Spirial Desing) The Spirial design follows the stages of the waterfall, but in contrast, the design starts very rough and becomes more detailed over time (http://asd-www.larc.nasa.gov/barkstrom/public/The_Standard_Waterfall_Model_For_Systems_Development.htm)

At the end of each phase, the customer will have something to evaluate (not nesceserally a usable project or even a prototype). This type of design is primirally used for risk analysis since the customer is so involved at the end of each phase, it should pervent misunderstanding by the programmers, the use of unfeasible architecture, etc. This model forces the team to ask the question "Should we continue" at the end of each cycle. 

An example of where you may want to use this is if you have a project with high goals and a limited budget. Say you're a goverment agency which needs to design a new missle guidance system. You could give someone a research grant and they come back to you at each stage of developemnt so you can decide weather to contine their funding or if the cost/risk is too high to continue.

Incremental Model) 
With the Incremental model, after each cycle, you will have a completed product. The idea behind the Incremental Model is to start with the most basic design requirments and with each successive build, incorporate more of what's required. This has several advantages. Each phase is a "mini-waterfall," maintance is implemented directly into the model (each new increment can be though of as maintaing the previous build), and you development team could stop early if the end consumer is satified with the end product of one of the cycles. (gatech)

The disadvantages include having lots of proto-types you'll have to throw away from the early cycles and no clear rational for starting a new phase.

A good use of an Incremental Model is say that you want to get a piece of software out before a group of people for immediate testing, use and feedback. With an Incremental Model, you could contine to push out new, usable programs and get immediate feedback on it in order to start the next phase. 

http://www.cc.gatech.edu/computing/SW_Eng/people/Faculty/Colin.Potts/Courses/3302/1-08-mgt/sld011.htm



Waterfall Model)

The waterfall model is composed of a serise of stages: Requirments, Specifications, High-level design, Detailed Design, Implementation, Testing, Maintenance. Some companies give different names to these stages which can be confusing but unimportant. When a developement team moves from one stage to the next, they go back, make sure they have everything they need from that phase, and then continue on.

Your development is treated like water in a waterfall: once you go on down to the next fall, you can't easily go back up. The advantage of this is being able to nail things down along the way and making sure your complete and satisified with one phase before moving on to the next. However there are disadvantages. Feedback isn't very encourage in this model and since all delivery is done at the end with only documentation avaiable along the way, it's a poor way to see visible progress. (gatech)

An example of when you might use the waterfall model is if you're designing a web portal for the Computer Science department of Tennessee Tech. It allows the class to clearly define and settle on requirments, concepts and base designs before moving on into tetoirty we could get into a mess in without clearly defined documentation.



---
Testing should be performed at every stage of the waterfall model before moving on to the next phase. Sometimes testing may just mean testing concepts or making sure you have all your requirments, but going on to a new phase and then having to backtrack into an old phase can be costly and should be avoided. The only phase that doesn't require testing is maintances as it is a continual phase of testing and fixing for the rest of the life of the product. 







