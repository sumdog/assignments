<html xmlns:v="urn:schemas-microsoft-com:vml"
xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 11">
<meta name=Originator content="Microsoft Word 11">
<link rel=File-List href="FinalF06_files/filelist.xml">
<title>1</title>
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:View>Print</w:View>
  <w:SpellingState>Clean</w:SpellingState>
  <w:GrammarState>Clean</w:GrammarState>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:BrowserLevel>MicrosoftInternetExplorer4</w:BrowserLevel>
 </w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState="false" LatentStyleCount="156">
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;
	mso-font-alt:"\FF2D\FF33 \660E\671D";
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:-1610612033 1757936891 16 0 131231 0;}
@font-face
	{font-family:Verdana;
	panose-1:2 11 6 4 3 5 4 4 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:536871559 0 0 0 415 0;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;
	mso-font-charset:128;
	mso-generic-font-family:modern;
	mso-font-pitch:fixed;
	mso-font-signature:-1610612033 1757936891 16 0 131231 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Times New Roman";
	mso-fareast-font-family:"MS Mincho";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
span.body1
	{mso-style-name:body1;
	font-family:Verdana;
	mso-ascii-font-family:Verdana;
	mso-hansi-font-family:Verdana;
	color:#333333;}
span.SpellE
	{mso-style-name:"";
	mso-spl-e:yes;}
span.GramE
	{mso-style-name:"";
	mso-gram-e:yes;}
@page Section1
	{size:8.5in 11.0in;
	margin:.5in .5in .5in .5in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman";
	mso-ansi-language:#0400;
	mso-fareast-language:#0400;
	mso-bidi-language:#0400;}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="3074"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<p class=MsoNormal align=center style='text-align:center'>CPSC 542<span
class=GramE>&nbsp; <b>Final</b></span><b>
Examination&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</b>November 30, 2006</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span lang=EN style='mso-ansi-language:EN'>Create an html
document with answers and links to your programs.&nbsp; Zip up this document
and <b>all</b> of the files needed for each answer.&nbsp; Post this zipped file
to the Digital <span class=SpellE>Dropbox</span> no later than 8 am on Friday,
December 8, 2006.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The <span class=SpellE><span class=GramE>HexaCast</span></span><span
class=GramE>™</span> Corporation (a division of <a
href="http://www.hexadata.net/"><span class=SpellE>Hexadata</span>™</a>)
delivers television programming to its customers using digital set-top
boxes.&nbsp; These boxes run Linux and utilize J2ME with the CDC
configuration.&nbsp; The CDC configuration includes these jars:&nbsp; <span
class=SpellE>java.lang</span>, <span class=SpellE>java.io</span>, java.net, <span
class=SpellE>java.util</span>, <span class=SpellE>java.text</span> and <span
class=SpellE>java.security</span>. &nbsp;The additional Personal Profile <span
class=GramE>adds</span>:&nbsp; lightweight and heavyweight AWT components, support
for <span class=SpellE>BigDecimal</span> and <span class=SpellE>BigInteger</span>,
JavaBeans, and applets and <span class=SpellE>Xlets</span>. Additional jars can
be added as needed.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The current software to display <span class=SpellE><span
class=GramE>tv</span></span> programming is being revised.&nbsp; <span
class=SpellE>HexaCast</span>™ is impressed by your wide grasp of XML
technologies. &nbsp;They have hired you to create some demonstration
programs.&nbsp; These programs will be used to help them decide on the
technologies to be used in the latest software release.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The <span class=SpellE><span class=GramE>tv</span></span>
program information is retrieved from a data base and delivered in xml
form.&nbsp; An example of such a file is <a href="programs.xml"><span
class=SpellE>programs.xml</span></a>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>1. (10) <span class=GramE>The</span> information needs to be
validated. &nbsp;One possibility is to include an internal DTD that defines a
class of XML documents that contain information on TV show schedules.&nbsp;
Create a DTD for these documents.&nbsp; Include this DTD in a copy of <span
class=SpellE>programs.xml</span> and use it to validate the xml.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>2. (10) <span class=GramE>Another</span> possibility is to
use a schema to define a class of XML documents that contain information on TV
show schedules.&nbsp; Create an XML schema for these documents.<span
style='mso-spacerun:yes'>  </span>Include references to this schema in a copy
of <span class=SpellE>programs.xml</span> and use it to validate the xml file.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>3. <span style='mso-spacerun:yes'> </span>(14) XSLT can be
used to prepare the display. Give an XSLT file that could be used with <span
class=SpellE>programs.xml</span> type files to display information about all
shows that air during the current hour. </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>4. (15) A <span class=SpellE>programs.xml</span> type file containing
all programs for a 24 hour period is transmitted to the set-top device at 5 am
each day.<span style='mso-spacerun:yes'>  </span>Give a SAX Java program to use
this xml file to display information about all shows that air during the
current hour.</p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal>5. (15) A <span class=SpellE>programs.xml</span> type file containing
all programs for a 24 hour period is transmitted to the set-top device at 5 am
each day.<span style='mso-spacerun:yes'>  </span>Give a DOM Java program to use
this xml file to display information about all shows that air during the
current hour.</p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal>6. <span style='mso-spacerun:yes'> </span>(13) Create RPC
Client and Server Java programs to formulate RPC requests and process and display
RPC responses with information about a program.<span style='mso-spacerun:yes'> 
</span>The name of the program is contained in the RPC request.<span
style='mso-spacerun:yes'>  </span>The response contains the item (day, channel,
<span class=SpellE>startTime</span>, <span class=SpellE>endTime</span>, <span
class=SpellE>showTitle</span>) and info (category, actor, <span class=SpellE>criticRating</span>)
fields.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>7. <span style='mso-spacerun:yes'> </span>(13) Create Java
programs to formulate SOAP requests and process and display SOAP responses with
information about a program.<span style='mso-spacerun:yes'>  </span>The name of
the program is contained in the SOAP request.<span style='mso-spacerun:yes'> 
</span>The response contains the item (day, channel, <span class=SpellE>startTime</span>,
<span class=SpellE>endTime</span>, <span class=SpellE>showTitle</span>) and
info (category, actor, <span class=SpellE>criticRating</span>) fields.</p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal>8.<span style='mso-spacerun:yes'>  </span>(10) What XML
technologies would you recommend that <span class=SpellE>HexaCast</span>™
utilize in their new software system? What would each of the technologies be
used for in this system? Why would you recommend the technology?</p>

<p class=MsoNormal><o:p>&nbsp;</o:p></p>

<p class=MsoNormal>&nbsp;</p>

</div>

</body>

</html>
