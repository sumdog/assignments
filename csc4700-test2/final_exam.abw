<?xml version="1.0"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword xmlns="http://www.abisource.com/awml.dtd" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:dc="http://purl.org/dc/elements/1.1/" version="1.0.4" fileformat="1.0" styles="unlocked">
<!-- =====================================================================  -->
<!-- This file is an AbiWord document.                                      -->
<!-- AbiWord is a free, Open Source word processor.                         -->
<!-- You may obtain more information about AbiWord at www.abisource.com     -->
<!-- You should not edit this file by hand.                                 -->
<!-- =====================================================================  -->

<styles>
<s type="P" name="Normal" basedon="" followedby="Current Settings" props="font-family:Nimbus Roman; dom-dir:ltr; font-style:normal; margin-left:0pt; text-indent:0in; margin-top:0pt; text-position:normal; font-weight:normal; font-variant:normal; color:000000; text-decoration:none; line-height:1.0; margin-bottom:0pt; text-align:left; margin-right:0pt; bgcolor:transparent; font-size:12pt; widows:2; font-stretch:normal"/>
</styles>
<ignoredwords>
<iw>plugins</iw>
<iw>PopTalk</iw>
<iw>Intranet</iw>
</ignoredwords>
<pagesize pagetype="Letter" orientation="portrait" width="8.500000" height="11.000000" units="in" page-scale="1.000000"/>
<section>
<p style="Normal"><c props="lang:en-US">Web application development has a lot in common with traditional application development as well as several differences. Fundamentally you're accomplishing the same task as a traditional client/server application. In a client/server application, you have to write a client, a sever, establish a protocol, deal with security, etc. The main difference is that with a web application, HTML is your graphical toolkit and HTTP is your protocol and you have to deal with the fact that it's somewhat stateless (which why cookies came about).</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">The main differences between web development and client/server application development is that you're restricted to a very strict protocol and displaying mechanism. The protocol also allows for numerous security problems. Since the Internet is so accessible by anyone with a computer and $20 a month to burn, it's important to be very careful with all your data, especially if you're dealing with any private data on a mass scale. You must make sure to validate data as it's being passed back to you from the web client (even if you have java-script that validates it on the client side. Java-script is client side and can be turned off, allowing people to send you malicious data).</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">This bring us to another issue with web development. Client and Server side scripting. With web development you're restricted to one displaying medium: the web browser. Today there are two major web browser (Mozilla and another really crappy one we won't mention) along with several other minor smaller browsers. These browsers support a number of client side functionality such as Cascading Style Sheets, Java-script and plugins. Although most modern browsers support these client extensions, we can't always depend on them and should try to establish our website so that we don't discriminate against older browsers. To do this, we need to ensure that the content is sent out the way we want it displayed with little scripting intervention from the browser. Recently languages such as ASP, PHP, PopTalk, and JSP have made this type of functionality easier to program. They allow scripts to output data each time a page is accessed as opposed to traditional static web pages which are always the same no matter what. This is the basis of actual web application development.</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">There are several advantages to developing a web application as opposed to a traditional client/server app. For one, you don't have to deploy a client. Everyone with a computer all ready has one. Your application is also instantly portable to every operating system with a current web browser. You can develop for the entire world or you can develop for a small local Intranet. You can also easily make a front end to existing legacy applications (e.g. most of the old Cobol indexed file databases have nice web front ends today, but the original data is still processed using ugly Cobol scripts). </c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">The disadvantages include security, having to deal with browser compatibility (both different browsers and outdated browser technology), the limitations of HTML/CSS and the stateless nature of websites.</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">What it boils down too is that web applications run on a platform that was originally designed for static content. Enhancements to the protocol have allowed people to implement dynamic content in a very non-traditional fashion.</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">Web applications carry many advantages and disadvantages. There is currently a growing demand for web development and web applications will continue to evolve with tradition applications in the growing environment of Intra/Internets.</c></p>
</section>
</abiword>
