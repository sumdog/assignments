<?xml version="1.0"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword xmlns="http://www.abisource.com/awml.dtd" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:dc="http://purl.org/dc/elements/1.1/" version="1.0.5" fileformat="1.0" styles="unlocked">
<!-- =====================================================================  -->
<!-- This file is an AbiWord document.                                      -->
<!-- AbiWord is a free, Open Source word processor.                         -->
<!-- You may obtain more information about AbiWord at www.abisource.com     -->
<!-- You should not edit this file by hand.                                 -->
<!-- =====================================================================  -->

<styles>
<s type="P" name="Normal" basedon="" followedby="Current Settings" props="font-family:Nimbus Roman; dom-dir:ltr; font-style:normal; margin-left:0pt; text-indent:0in; margin-top:0pt; text-position:normal; font-weight:normal; font-variant:normal; color:000000; text-decoration:none; line-height:1.0; margin-bottom:0pt; text-align:left; margin-right:0pt; bgcolor:transparent; font-size:12pt; widows:2; font-stretch:normal"/>
</styles>
<ignoredwords>
<iw>Wolfenstine</iw>
<iw>OpenGL</iw>
<iw>httpd</iw>
<iw>doPost</iw>
<iw>Bugzilla</iw>
<iw>servlet</iw>
<iw>http</iw>
<iw>plugins</iw>
<iw>html</iw>
<iw>de</iw>
<iw>Mozilla's</iw>
<iw>jsp</iw>
<iw>Mozilla</iw>
<iw>PopTalk</iw>
<iw>FreeBSD</iw>
<iw>automagically</iw>
<iw>HttpServlet</iw>
<iw>Quan</iw>
<iw>Intranet</iw>
<iw>ginnie</iw>
<iw>doGet</iw>
<iw>NCSA's</iw>
</ignoredwords>
<pagesize pagetype="Letter" orientation="portrait" width="8.500000" height="11.000000" units="in" page-scale="1.000000"/>
<section props="columns:1">
<p style="Normal" props="text-align:center"><c props="font-weight:bold; font-size:14pt">CSC 4700 / Dr. Talbert </c></p>
<p style="Normal" props="text-align:center"><c props="font-weight:bold; font-size:14pt"></c><c props="font-weight:bold; font-size:14pt">Final Exam</c></p>
<p style="Normal" props="text-align:center"><c props="font-weight:bold; font-size:14pt">Sumit Khanna</c></p>
<p style="Normal"></p>
<p style="Normal"></p>
<p style="Normal"><c props="font-weight:bold; font-size:16pt">1)</c> Web services have been a growing trend (and by trend I mean "buzzword") in the past few months. Both Microsoft and Sun have tried to implement web services within their new programming languages (ASP.NET and Java respectively). Web Services are also available in other web programming languages such as PHP. Let's take a look as some web services and how they are implemented in these various languages.</p>
<p style="Normal"><c></c></p>
<p style="Normal">Basically, a web service is a system you can send a function request to using the HTTP protocol and get a response back in a predefined structure. Most web services use some type of XML format to send and get information. Some languages even go to the point of making the requests entirely transparent to the programmer, so all the programmer does is create an instance of an object and call a method on it (similar to RPC: Remote Procedure Calls). To accomplish this, you need a set of predefined formats to transmit and receive these calls. There are currently two major XML RPC standards for web services. They are XML-RPC and SOAP. Although the format and order of function arguments are different, they basically both accomplish the same task.</p>
<p style="Normal"><c></c></p>
<p style="Normal">Like the nature of the web and the HTTP protocol, web services are also intended to be stateless. It's best to think of them as a collection of static functions. You send one request to one service with no session information stored about successive requests. </p>
<p style="Normal"><c></c></p>
<p style="Normal">Now let's examine implementation. In Microsoft's .NET framework, web services are treated just like local objects. You add a reference to the specific service using the services WSDL file (A discovery file listing all the functionality of the service). The name space for the service is the host name of the machine the service is located at. Then you simply create an instance of that web service object and call methods on it as if it were a locally defined object.</p>
<p style="Normal"><c></c></p>
<p style="Normal">To create a web service in .NET, you simply create a regular Visual Basic or C# class, add certain tag that indicate certain functions are web functions and certain classes are web services, and then compile it as a web service and place it in a Microsoft IIS web folder with permission to execute scripts and applications.</p>
<p style="Normal"><c></c></p>
<p style="Normal">The inner-working of connection to the web service, converting function calls to and from XML and HTTP connections are completely abstracted from the programmer. Although it is abstracted, the web service protocol is not propriety (unlike everything else that Microsoft produces). They use the open standard SOAP for transmitting objects over the web. Because of this, .NET applications can add references from services written in other languages and on other platforms as long as they conform to the SOAP standard and have a valid WSDL file.</p>
<p style="Normal"><c></c></p>
<p style="Normal">Next, let's look at Java's (J2EE) approach to web services using a web servlet engine. There are many basic servlet engines out there that can serve web pages designed in Java. One of the more common free ones is Tomcat made by the Apache Foundation. Tomcat can be a standalone server or work with the Apache httpd and various other web servers (IIS, Netscape Net-center, etc). There are two ways to create a web application using a servlet engine. You can use jsp (Java Server Pages) which are similar to PHP and ASP in the sense that they are just standard HTML with special tags that will let you execute certain code in Java on the server-side. You can also write a servlet by creating a class that extends HttpServlet and then overriding the doGet() and doPost() methods.</p>
<p style="Normal"><c></c></p>
<p style="Normal">Using this and the built-in XML parsers in J2EE, you can easily implement a SOAP or XML-RPC based web service. In fact, Apache has all ready done that for you and has several packages available that make creating web services easier. You can also load existing Java web frameworks on top of a standard servlet engine. To the servlet engine, they run as standard applications, but to the developer, they made programing web services and web applications much easier. IBM has a comical web application known as Web Sphere. There are also open-source solutions such has JBOSS. Both Web Sphere and JBOSS, to some degree, attempt to abstract web application development and make it easy to quickly put up functional web sites. </p>
<p style="Normal"><c></c></p>
<p style="Normal">For our final example, we'll look at PHP. If PHP is compiled with XML support and you add the appropriate PEAR libraries (PEAR is a subproject of PHP), you can access SOAP objects very easily. You simply send a request with the parameters to a SOAP function and it returns an object you can pull data out of. (The term "object" is used loosely since PHP doesn't have full OOP support). </p>
<p style="Normal"><c></c></p>
<p style="Normal">When it comes down to it, the differences between various web service/application implementations all comes down to a degree of abstraction. Microsoft, being the big giant that it is, has enclosed everything you could possibly need within their .NET development environment and IIS server. J2EE and PHP provide a very solid base and they can do a lot, as far as web development is concerned, by themselves. However, many people have made rich and well-designed environments to work in such as JBOSS, PHP-Nuke, etc. All languages have their own strengths and limitations. It's important to study and understand each environment so that a development team can make an informed choice when deciding which environment to use to develop web applications.</p>
<p style="Normal"></p>
<p style="Normal"></p>
<p style="Normal"></p>
<p style="Normal"><c props="font-weight:bold; font-size:14pt">2) </c>Apache and Mozilla came from two very different backgrounds, but have both been successful open source projects. Apache started out as a desperate attempt by system administrators to maintain the NCSA web server after NCSA stopped active development. (httpd.apache.org). Mozilla was started by the Netscape corporation during a time when Netscape was losing its web browser market to Microsoft's Internet Explorer (which ironically was based off NCSA's Mosaic). Netscape was one of the first major corporations to open it's source code to the public domain as an open source development project. Although both projects had different objectives, approaches and designs, they are both considered very successful open source projects by todays standards.</p>
<p style="Normal"><c></c></p>
<p style="Normal"><c props="font-style:italic; font-weight:bold">Usability</c></p>
<p style="Normal"><c></c></p>
<p style="Normal">During it's early development years, Mozilla was sadly a very unusable product. It was based off Netscape 6.x and it's Gecko HTML rendering engine and the early de-engineering/re-engineering became tedious and bug ridden. It gave birth to the Bugzilla bug tracking system which has also been a huge success of the Mozilla team as one of the most powerful open source bug tracking and management tools. </p>
<p style="Normal"><c></c></p>
<p style="Normal">As Mozilla development contained, the product kept getting more and more stable. People who supported Mozilla by testing each beta release noticed the changes and how Mozilla would stop crashing as frequently. By the time Mozilla got into it's .9x series, it was turning out to be a decent web browser. The 1.0 release was what set the stage for Mozilla. It's first stable release and full Windows install proved to the world that Netscape's hard work was not dead, but alive, kicking, stable and ready to be put to use on home computers as a fully functional replacement to Internet Explorer.</p>
<p style="Normal"><c></c></p>
<p style="Normal"><c props="font-style:italic; font-weight:bold">Testing</c></p>
<p style="Normal"><c></c></p>
<p style="Normal">Testing has always been an interesting issue with open source software. Typically there are several branches of any given project. For starters you have "Releases" which are fully tested, ready to use on mass scale packages. These are rare. You also have "Release Candidates" which are products that are almost ready to release and which should be bug free, but require testing in real-world environments before they can be given a seal of approval. You then have "betas." These vary. Some betas will have comments from the authors stating that the software is ready to be tested in a real environment while others state the product is still in a very early stage of development. Most open source projects stay in a beta state for years! Below beta is the alpha which is typically nothing more than ideas and a flowchart with little pieces of code attached. Below that is the dreaded nightly-build. These are compiled each night automagically from CVS and typically the only guarantee you get when you use one is "it compiled."</p>
<p style="Normal"><c></c></p>
<p style="Normal">As far as Mozilla and Apache are concerned, Mozilla was in beta for a very long time. The Mozilla 1.0 release was met with fanfares and launch parities in many major cities. Apache's http2 server, although not met with as much fanfare, was similar in it's beta stage.</p>
<p style="Normal"><c></c></p>
<p style="Normal">The key to open source testing is that the system administrators realize that they're in a continual state of being ginnie pigs and can choose the level of risk they want to manage. Some administrators may test active betas on their major server while others find their tasks so critical that they'll only test release candidates. Still, others with very critical servers may only use releases on their main servers and use secondary servers for testing. The contrast is with Microsoft software and how everyone is a ginnie pig weather or not they like or ever realize it. </p>
<p style="Normal"><c></c></p>
<p style="Normal"><c props="font-style:italic; font-weight:bold">Foundations</c></p>
<p style="Normal"><c></c></p>
<p style="Normal">The most notable thing to notice about Mozilla and the Apache is that there is no "Mozilla" product or "Apache" product. There is the "Apache HTTP Daemon" and the "Mozilla Web Browser." Why should semantics matter? Although these groups started to support one product, they've grown into huge open source foundations. Apache has several projects under the Apache name including Ant (java build utility) and Tomcat (java servlet engine). Mozilla's sub projects include scaled down version of their web browser and mail clients.</p>
<p style="Normal"><c></c></p>
<p style="Normal">Browsing both organizations websites will show you massive lists of projects, sub-projects, branches of current projects and project proposals. These originations aren't necessarily centered around one project anymore, but have branched into making all kinds of new tools to help better support open source software development and the free software community.</p>
<p style="Normal"><c></c></p>
<p style="Normal"><c props="font-weight:bold; font-style:italic">Conclusion</c></p>
<p style="Normal"><c></c></p>
<p style="Normal">Incorporating open source techniques may be difficult in commercial programming. With open source development, most of your developers are volunteers. many of which enjoy working on a particular project. There is rarely an urgency of a deadline to meet or needs to fulfill. However, commercial groups may benefit by find teams of employees that express an interest in certain projects so that they are more passionate about their work and incorporating more open beta testing among the general public. An example is ID software who has started making beta testing more open and during their development of Castle Wolfenstine, they made several releases available as demos and encourages feedback and bug reports from gamers, sometimes even releasing a new demo each week. </p>
<p style="Normal"><c></c></p>
<p style="Normal">Finally, many corporations have benefited the open source community by release a lot of their older code to the public domain. Both Apache and Mozilla came from commercial projects (NSCA Web server and Netscape), ID software has released the code for many of their old games (Doom, Doom II, Quake, etc.), Crack-dot-com released the source code for all their games before they went under (Abuse and Golgotha) and even Toys for Bob released the code for Ur-Quan Masters (the name had to be changed from Star Control II because Accolade still holds the rights to it) to the community. In almost every case, teams of people have taken up the projects and have developed fully usable game engines and game improvements. Many OpenGL ports have been made of the original doom as well as Linux and FreeBSD ports.</p>
<p style="Normal"><c></c></p>
<p style="Normal">Some companies actually actively developed the code they release to the community. Examples include IBM who released their Journaling File System (JFS) to the community and SGI who released XFS to the community. Both companies actively use and develop the file system as well as release kernel patches for it. JFS was incorporated into the 2.4 series of kernels and XFS is currently in the 2.5 development branch.</p>
<p style="Normal"><c></c></p>
<p style="Normal">In conclusion, open source development is a very interesting and unique type of development which has led to the production of many fine tools, environments and utilities. Corporations who contribute old code have played a vital part in reviving old dieing software and creating modern useful applications. If it wasn't for the Mozilla team, Netscape could very well be a dead browser by now. Although everything can't be open-source, nor should it be (well, maybe it should in a perfect world), companies can contribute to to the community by making older products available and by making parts of current software open (the old shareware concept; try and if you want the extras, buy). Both open and closed software development teams can learn a lot from each other and help build better software for the consumer public.</p>
<p style="Normal"><c></c></p>
<p style="Normal"><c></c></p>
<p style="Normal"><c props="font-style:italic">Works Cited</c></p>
<p style="Normal">http://httpd.apache.org/ABOUT_APACHE.html</p>
<p style="Normal"></p>
<p style="Normal"></p>
<p style="Normal"></p>
<p style="Normal"><c props="lang:en-US; font-weight:bold; font-size:14pt">5) </c><c props="lang:en-US">Web application development has a lot in common with traditional application development as well as several differences. Fundamentally you're accomplishing the same task as a traditional client/server application. In a client/server application, you have to write a client, a sever, establish a protocol, deal with security, etc. The main difference is that with a web application, HTML is your graphical toolkit and HTTP is your protocol and you have to deal with the fact that it's somewhat stateless (which is why cookies came about).</c><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">The main differences between web development and client/server application development is that you're restricted to a very strict protocol and displaying mechanism. The protocol also allows for numerous security problems. Since the Internet is so accessible by anyone with a computer and $20 a month to burn, it's important to be very careful with all your data, especially if you're dealing with any private data on a mass scale. You must make sure to validate data as it's being passed back to you from the web client (even if you have java-script that validates it on the client side. Java-script is client side and can be turned off, allowing people to send you malicious data).</c><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">This bring us to another issue with web development. Client and Server side scripting. With web development you're restricted to one displaying medium: the web browser. Today there are two major web browser (Mozilla and another really crappy one we won't mention) along with several other minor smaller browsers. These browsers support a number of client side functionality such as Cascading Style Sheets, Java-script and plugins. Although most modern browsers support these client extensions, we can't always depend on them and should try to establish our website so that we don't discriminate against older browsers. To do this, we need to ensure that the content is sent out the way we want it displayed with little scripting intervention from the browser. Recently languages such as ASP, PHP, PopTalk, and JSP have made this type of functionality easier to program. They allow scripts to output data each time a page is accessed as opposed to traditional static web pages which are always the same no matter what. This is the basis of actual web application development.</c><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">There are several advantages to developing a web application as opposed to a traditional client/server app. For one, you don't have to deploy a client. Everyone with a computer all ready has one. Your application is also instantly portable to every operating system with a current web browser. You can develop for the entire world or you can develop for a small local Intranet. You can also easily make a front end to existing legacy applications (e.g. most of the old Cobol indexed file databases have nice web front ends today, but the original data is still processed using ugly Cobol scripts). </c><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">The disadvantages include security, having to deal with browser compatibility (both different browsers and outdated browser technology), the limitations of HTML/CSS and the stateless nature of websites.</c><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">What it boils down too is that web applications run on a platform that was originally designed for static content. Enhancements to the protocol have allowed people to implement dynamic content in a very non-traditional fashion.</c><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">Web applications carry many advantages and disadvantages. There is currently a growing demand for web development and web applications will continue to evolve with tradition applications in the growing environment of Intra/Internets.</c><c props="lang:en-US"></c></p>
</section>
</abiword>
