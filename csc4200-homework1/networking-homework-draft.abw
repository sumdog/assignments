<?xml version="1.0"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword xmlns="http://www.abisource.com/awml.dtd" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:dc="http://purl.org/dc/elements/1.1/" version="1.0.2" fileformat="1.0" styles="unlocked">
<!-- =====================================================================  -->
<!-- This file is an AbiWord document.                                      -->
<!-- AbiWord is a free, Open Source word processor.                         -->
<!-- You may obtain more information about AbiWord at www.abisource.com     -->
<!-- You should not edit this file by hand.                                 -->
<!-- =====================================================================  -->

<styles>
<s type="P" name="Normal" basedon="" followedby="Current Settings" props="font-family:Nimbus Roman; dom-dir:ltr; font-style:normal; margin-left:0pt; text-indent:0in; margin-top:0pt; text-position:normal; font-weight:normal; font-variant:normal; color:000000; text-decoration:none; line-height:1.0; margin-bottom:0pt; text-align:left; margin-right:0pt; bgcolor:transparent; font-size:12pt; widows:2; font-stretch:normal"/>
</styles>
<pagesize pagetype="Letter" orientation="portrait" width="8.500000" height="11.000000" units="in" page-scale="1.000000"/>
<section>
<p style="Normal"><c props="lang:en-US">The data link layer is still needed because the </c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">9)</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">The transport layer is simply a means of receiving information and sending it to the right process/program. It sends and receives data in packets, and in certain conditions (e.g. the transport protocol is TCP) it will even check to make sure all the packets arrive completely and in order. It can even request resends of bad packets, but it doesn't exist within the network. It simply passes segments of data to the lower layers to transport it. The lower layers have no knowledge of what processes each segment belong to, they're just given a destination to ship them too. Likewise, the transport layer has no knowledge of how the lower layers will break apart or ship the data, they just monitor what's sent back to them to make sure the data gets sent correctly. </c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">11)</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">HTTP, FTP and SMTP all require that the data sent via their respective protocols be complete and error-free on the other end. TCP provides some internal abstraction under which packet checksums and checks for packet loss are performed, which ensure that the stream given to the application is exactly what the application on the other end of the connection is sending. </c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">UDP doesn't provide much error checking. The only thing that you're guaranteed of with UDP is that if you receive a packet, it's error-free (via an internal checksum within the UDP protocol). UDP is useful if you need data to be transmitted fast and you don't care if you lose packets. An example is a heat sensor in a reactor. The sensor could be setup to transmit UDP packets that have a temperate and a time-stamp and nothing else. If a few packets get dropped, it doesn't really matter as long as you have a fairly recent temperature reading.</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">HTTP, FTP, and SMTP don't necessarily have to be fast (they must transmit data timely, but not at the expense of lost data), so TCP is a much better option.</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">12)</c></p>
<p style="Normal"><c props="lang:en-US">Hub - Repeats all the information that's sent into it from any given connection to ever other connection that's plugged into it. (Broadcast repeating)</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">Bridge - A Bridge is smarter than a Hub and is closely related to a Switch. A bridge doesn't just blindly repeat everything that's sent to it. It actually works across the link-layer and is intelligent enough that when it receives a frame, it notes the MAC address of sender. When a frame comes in for that sender, it will send it only to the sender and not broadcast it to the rest of the machines. </c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">Router - A Router is the smartest of the three devices mentioned here. It actually analyzes data on the Network layer to determine where to ship data. Routers are like Bridges except that they have the additional ability of sending data across WANs or Wide Area Networks. If a router receives a packet destined for a location outside the local network, a router will send that packet off to another router that can get it closer to its destination. Routers can be very complicated and receives tables, graph theory, etc. to determine the shortest path across a WAN to ship a packet. Routers can also talk to each other to update their tables so that they'll continually be able to determine the shortest paths and avoid network congestion. </c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">11)  FTP actually makes two connections. The initial connection is made from the client to the server and is used to transmit all control data (get a file, send a file, change directories, etc). When a user requests a file, a second connection is opened from the client to the server (or in passive mode--for when the client is behind a firewall--, from the server to the client). Because the control information is sent through a different socket connection than the file transfer, FTP's control information is considered to be send "out-of-band." </c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">12)  </c></p>
<p style="Normal"><c props="lang:en-US">Alice will type the message in her web browser and click the "send" button. Her message is send to the Hotmail server using the standard HTTP (or possibly HTTPS if she has encryption enabled) protocol. Although Hotmail is a propriety web-based email service and doesn't  support POP or IMAP, it still must use an MTA (mail transport agent) behind the scenes. The MTA (Microsoft's version of sendmail, most likely Microsoft Exchange) will take Alice's message, analyze it's destination, and then attempt to send it.</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">First it find the domain of the email (e.g. if it's to Bob@bob.bob, the domain is @bob.bob), and send a UDP message to a DNS server to look up the MX record for the domain. The MX record contains the address of the mail server for which all mail traffic destined for that domain is supposed to go. After it gets the address of the mail server, it will then contact the mail server using the SMTP protocol and deliver the message. The SMTP server analyzes the message, determines if the local user exists. If it does, it stores the message in a local mail database (e.g. an mbox file or a Maildir). If the user or alias doesn't exist, it rejects the message and sends a bounce.</c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">Bob then uses the POP protocol to contact the mail server and the mail server will read his messages out of storage (e.g. an mbox or Maildir) and return them to Bob. </c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US">The reason an intermediate SMTP server is used, as opposed to your mail program directly connecting to the destination SMTP server, is that SMTP server will attempt to connect to their destination for 4 hours before sending a bounce. This is built into the SMTP protocol as a buffer in case a system administrator needs  to take down a mail server to be updated/replaced. This gives an administrator a 4 hour window to bring a mail server back on-line before the user notices any bounced messages. </c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
<p style="Normal"><c props="lang:en-US"></c></p>
</section>
</abiword>
